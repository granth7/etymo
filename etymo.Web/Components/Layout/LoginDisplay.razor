@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims;
@using System.Security.Cryptography
@using System.Security.Principal;
@using System.Text
@using Microsoft.AspNetCore.Components.Authorization
@using etymo.Web.Components.Services
@inject UserStateService UserState
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MorphemeApiClient MorphemeApiClient

<AuthorizeView>
    <Authorized>
        <div class="dropdown dropdown-end">
            <div tabindex="0" role="button" class="btn btn-ghost btn-circle avatar">
                <div class="w-10 rounded-full">
                    <img alt="User Avatar"
                    src="@AvatarUrl" />
                </div>
            </div>
            <ul tabindex="0"
            class="menu menu-sm dropdown-content bg-base-100 rounded-box z-[1] mt-3 w-52 p-2 shadow">
                <li>
                    <a href="/Profile/@UserState.UserId" class="justify-between btn">
                        Profile
                    </a>
                </li>

                <AuthorizeView Roles="admin, content_moderator">
                    <Authorized Context="moderation">
                        <li>
                            <a href="/admin/reports" class="justify-between btn">
                                Reports
                                @if (PendingReportsCount > 0)
                                {
                                    <span class="badge badge-error">@PendingReportsCount</span>
                                }
                            </a>
                        </li>
                    </Authorized>
                </AuthorizeView>

@*                 <li><a>Settings</a></li>
 *@                <li>
                    <form method="post" action="authentication/logout" style="display:inline;">
                        <AntiforgeryToken />
                        <button type="submit" class="btn btn-link">Logout</button>
                    </form>
                </li>
            </ul>
        </div>
    </Authorized>
    <NotAuthorized>
        <a href="authentication/login" class="btn btn-primary">Login</a>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter]
    private string? UserGuid { get; set; }

    private string AvatarUrl { get; set; } = "https://api.dicebear.com/9.x/thumbs/svg?seed=fallback";
    private int PendingReportsCount { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        await GetAvatarUrl();
        await GetPendingReportsCount();
    }

    private async Task GetAvatarUrl()
    {
        // Get the authentication state
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity?.IsAuthenticated != true)
        {
            return;
        }

        // Try to get Google avatar if available
        var googlePictureClaim = user.FindFirst("picture") ?? user.FindFirst("avatar_url");
        if (googlePictureClaim != null && !string.IsNullOrEmpty(googlePictureClaim.Value))
        {
            AvatarUrl = googlePictureClaim.Value;
            return;
        }

        // Generate a unique avatar based on user ID if no Google picture
        var userId = UserState.UserId ?? user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        if (!string.IsNullOrEmpty(userId))
        {
            // Use DiceBear API to generate a unique avatar based on user ID
            AvatarUrl = $"https://api.dicebear.com/9.x/thumbs/svg?seed={userId}";
        }
    }

    private async Task GetPendingReportsCount()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true && 
            (user.IsInRole("admin") || user.IsInRole("content_moderator")))
        {
            try
            {
                var reports = await MorphemeApiClient.GetReportsAsync();
                if (reports != null)
                {
                    PendingReportsCount = reports.Count(r => r.Status == "pending");
                }
            }
            catch (Exception)
            {
                // Silent fail - badge won't show if there's an error
                PendingReportsCount = 0;
            }
        }
    }
}