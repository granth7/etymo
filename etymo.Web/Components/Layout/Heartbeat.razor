@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.Extensions.Options
@using etymo.Web.Components.Handlers
@inject IJSRuntime JSRuntime
@inject IAuthenticationService AuthService
@inject IHttpContextAccessor HttpContextAccessor
@inject IOptionsMonitor<CookieAuthenticationOptions> OptionsMonitor
@inject IAuthenticationSchemeProvider SchemeProvider
@implements IAsyncDisposable

@code {
    private IJSObjectReference? _module;
    private DotNetObjectReference<Heartbeat>? _jsRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Attempting to load heartbeat.js...");

                _module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                    "import", "./js/heartbeat.js");

                Console.WriteLine("Module loaded, checking functions...");

                _jsRef = DotNetObjectReference.Create(this);
                await _module.InvokeVoidAsync("initializeHeartbeat", _jsRef);
                await _module.InvokeVoidAsync("startHeartbeat", 300000);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS Error: {ex.Message}");
            }
        }
    }

    [JSInvokable]
    public async Task<object> TriggerHeartbeat()
    {
        try
        {
            var context = HttpContextAccessor.HttpContext;
            if (context == null)
            {
                Console.WriteLine("HttpContext not available");
                return new { status = "error", message = "HttpContext not available" };
            }

            // Check authentication
            if (context.User.Identity?.IsAuthenticated != true)
            {
                Console.WriteLine("User not authenticated");
                return new { status = "unauthenticated" };
            }

            var authenticateResult = await context.AuthenticateAsync(CookieAuthenticationDefaults.AuthenticationScheme);
            if (authenticateResult?.Succeeded != true)
            {
                Console.WriteLine("Authentication failed");
                return new { status = "unauthenticated" };
            }

            var schemeName = CookieAuthenticationDefaults.AuthenticationScheme;
            var options = OptionsMonitor.Get(schemeName);
            var scheme = await SchemeProvider.GetSchemeAsync(schemeName);

            if (scheme != null && authenticateResult.Principal != null)
            {
                var ticket = new AuthenticationTicket(
                    authenticateResult.Principal,
                    authenticateResult.Properties,
                    schemeName);

                var validateContext = new CookieValidatePrincipalContext(
                    context,
                    scheme,
                    options,
                    ticket);

                await TokenRefreshHandler.RefreshTokenIfNeeded(validateContext);

                if (validateContext.ShouldRenew && validateContext.Principal != null)
                {
                    await context.SignInAsync(
                        CookieAuthenticationDefaults.AuthenticationScheme,
                        validateContext.Principal,
                        validateContext.Properties);

                    Console.WriteLine("Token refreshed");
                    return new { status = "success", refreshed = true, timestamp = DateTime.UtcNow };
                }
                else
                {
                    Console.WriteLine("No token refresh needed");
                    return new { status = "success", refreshed = false, timestamp = DateTime.UtcNow };
                }
            }

            return new { status = "success", refreshed = false, timestamp = DateTime.UtcNow };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Heartbeat exception: {ex.Message}");
            return new { status = "error", message = ex.Message };
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            if (_module != null)
            {
                await _module.InvokeVoidAsync("stopHeartbeat");
                await _module.DisposeAsync();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during disposal: {ex.Message}");
        }
        finally
        {
            _jsRef?.Dispose();
        }
    }
}