@inject IJSRuntime JSRuntime
@inject MorphemeApiClient ApiClient
@implements IAsyncDisposable

@code {
    private IJSObjectReference? _module;
    private DotNetObjectReference<Heartbeat>? _jsRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _jsRef = DotNetObjectReference.Create(this);
            // Load the module with our JS code
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "./js/heartbeat.js");
            // Start the heartbeat
            await _module.InvokeVoidAsync("startHeartbeat", 300000); // 5 minutes
            // Make an immediate call
            await TriggerHeartbeat();
        }
    }

    [JSInvokable]
    public async Task TriggerHeartbeat()
    {
        try
        {
            // Use the injected ApiClient instead of creating a new HttpClient
            var response = await ApiClient.GetHeartbeatAsync();
            
            // Log the response for debugging
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Heartbeat success: {content}");
            }
            else
            {
                Console.WriteLine($"Heartbeat failed: {response.StatusCode}");
            }
        }
        catch (JSDisconnectedException)
        {
            // Circuit disconnected, can't continue
            Console.WriteLine("Circuit disconnected during heartbeat");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Heartbeat exception: {ex.Message}");
        }
    }

    // GetBaseUrl method is no longer needed as we're using the ApiClient
    // which already has the BaseAddress configured

    public async ValueTask DisposeAsync()
    {
        try
        {
            // Clean up resources
            if (_module != null)
            {
                await _module.InvokeVoidAsync("stopHeartbeat");
                await _module.DisposeAsync();
            }
        }
        catch (JSDisconnectedException)
        {
            // Circuit already disconnected, nothing to worry about
            Console.WriteLine("Circuit disconnected during disposal");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during disposal: {ex.Message}");
        }
        finally
        {
            _jsRef?.Dispose();
        }
    }
}